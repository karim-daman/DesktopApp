name: "publish"

on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      # ... [previous steps remain unchanged]

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{secrets.TAURI_PRIVATE_KEY}}
          TAURI_KEY_PASSWORD: ${{secrets.TAURI_KEY_PASSWORD}}
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

      - name: Generate version.json
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          APP_VERSION=$(grep '^version =' src-tauri/Cargo.toml | cut -d '"' -f2)
          echo "{\"version\": \"$APP_VERSION\", \"notes\": \"See the assets to download this version and install.\", \"pub_date\": \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\"}" > version.json

      - name: Upload version.json
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: version-json
          path: version.json

  update-gist:
    needs: publish-tauri
    runs-on: ubuntu-latest
    steps:
      - name: Download version.json
        uses: actions/download-artifact@v3
        with:
          name: version-json

      - name: Update Gist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          # Ensure version.json exists
          if [ ! -f version.json ]; then
            echo "Error: version.json not found"
            exit 1
          fi

          # Update the Gist
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/gists/$GIST_ID \
            -d '{
              "files": {
                "version.json": {
                  "content": '"$(cat version.json | jq -R -s .)"'
                }
              }
            }'
